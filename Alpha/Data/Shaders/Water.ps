SamplerState SampleType;

cbuffer TranslateBuffer : register (b0)
{
	float2 translateVector;
	float2 padding;
};

cbuffer CameraPositionBuffer : register (b1)
{
	float3 cameraPosition;
	float padding2;
}

Texture2D reflectionTexture : register( t0 );
Texture2D refractionTexture : register( t1 );
Texture2D wavesTexture      : register( t2 );

//////////////////////
////   TYPES
//////////////////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
    float4 reflectionPosition : TEXCOORD1;
    float4 refractionPosition : TEXCOORD2;
	float fogFactor : FOG;
	float depth : DEPTH;
};

//////////////////////
////   Pixel Shader
/////////////////////
float4 WaterPixelShader(PixelInputType input) : SV_TARGET
{
    float2 reflectTexCoord;
    float2 refractTexCoord;
	float4 reflectionColor;
	float4 refractionColor;
	float4 normalMap;
	float3 normal;
	
    // Calculate the projected reflection texture coordinates.
    reflectTexCoord.x = input.reflectionPosition.x / input.reflectionPosition.w / 2.0f + 0.5f;
    reflectTexCoord.y = -input.reflectionPosition.y / input.reflectionPosition.w / 2.0f + 0.5f;

    // Calculate the projected refraction texture coordinates.
    refractTexCoord.x = input.refractionPosition.x / input.refractionPosition.w / 2.0f + 0.5f;
    refractTexCoord.y = -input.refractionPosition.y / input.refractionPosition.w / 2.0f + 0.5f;

	//Sample bump map :
	normalMap = wavesTexture.Sample(SampleType, (input.tex+translateVector)/13);
	normalMap = (normalMap + wavesTexture.Sample(SampleType, (input.tex-translateVector)/8));
	normal = (normalMap.xyz ) - 1.0f;

	float3 eyeVector = cameraPosition-input.position.xyz;
	float fresnelTerm = -dot(normalize(eyeVector),float3(0,1,0));

    reflectionColor = reflectionTexture.Sample(SampleType, saturate(reflectTexCoord + -abs(normal.xy/8)));
    refractionColor = refractionTexture.Sample(SampleType, saturate(refractTexCoord + normal.xy/8));
	
	float depthFactor = saturate(-input.depth/800);
	float4 color = float4(0.05f, 0.15f, 0.35f, 1)*depthFactor + float4(0.2f, 0.4f, 0.9f, 1)*(1-depthFactor);
	color = lerp(reflectionColor,refractionColor, fresnelTerm);
	color = lerp(color, float4(0.11f, 0.61f, 0.80f, 1.0f),0.3f);
	//return color;
	return lerp(color, float4(0.75,0.75,0.75,1), 1-input.fogFactor);
}